<?php
/**
* @file
* This module imports and updates information from the GBIF information management system (IMS) based on Filemaker into the Drupal database.
*/

/**
* Implements hook_help.
*
* Displays help and module information.
*
* @param path
*   Which path of the site we're using to display help
* @param arg
*   Array that holds the current path as returned from arg() function
*/

function gbifims_import_help($path, $arg) {
  switch ($path) {
    case "admin/help#gbifims_import":
      return '<p>' . t("This module enables import of data from the IMS database. It requires content types defined as follows: </p>
	  <ul>
	  	<li>event_ims: for events (more info to come).</li>
	  </ul>
	  <p>It accepts the following GET variables:</p>
	  <ul>
	  	<li>import_type=events: imports/updates information about events (more info to come).</li>
	  	<li>import_type=resources: imports/updates information about resources, that appear in the online resource centre (more info to come).</li>
	  	<li>import_type=projects: imports/updates information about projects (more info to come).</li>
	  </ul>") . '</p>';
      break;
  }
}

/**
* Implements hook_permission().
*/
function gbifims_import_permission() {
  return array(
    'access gbifims_import content' => array(
      'title' => t('Access content for the GBIF IMS import module'),
    )
  );
}

/**
* Implements hook_menu().
*/
function gbifims_import_menu() {
  $items = array();
  
    $items['gbifims_import'] = array(
    'title' => 'GBIF IMS data import',
    'page callback' => '_gbifims_import_page',
    'access arguments' => array('access gbifims_import content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
* Custom page callback function, declared in gbifims_import_menu().
*/
function _gbifims_import_page() {

/**
* Links with the FileMaker Studio and the definition of the database connection
* We also set all the variables that we will use later
*/
global $base_url ;
require_once(dirname(__FILE__).'/Connections/IMS_RO.php'); 
$ridi = $_GET['ridi'];
$ridd = $_GET['ridd'];

switch ($_GET['ot']) 
{
	//
	// The Operation Type variable defines what we do: operation type. c for create, u for update, d for deletion. The default launches the full process of checking.
	//
	case 'c':
		//
		// Create the resource
		//
		switch ($_GET['rt'])
		{
			case 'e':
			// 
			// Create event
			//
			// Get the values from the database into an array
			$array_event_details = retrieve_event_details ($ridi, $IMS_RO);
			// var_dump ($array_event_details);
			//
			// assigning values
			//
			$newnode = new stdClass();
			$newnode->type = "event_ims";
			$newnode->language = "und";
			$newnode->name = $array_event_details["Name_Full"];
			$newnode->title = $newnode->name;
			$newnode->body["und"][0]["value"] = $array_event_details["Desc_Short"];
			$newnode->body["und"][0]["summary"] = substr($array_event_details["Desc_Short"],0,200)."...";
			$newnode->uid = 64;
			$newnode->status = 1;
			$newnode->created = time();
			$newnode->changed = $newnode->created;
			$newnode->comment = 2;
			$newnode->promote = 1;
			$newnode->sticky = 0;
			$newnode->field_original_ims_id["und"][0]["value"] = $ridi;
			$newnode->field_image_url["und"][0]["value"] = $array_event_details["image_url"];
			$newnode->field_audience["und"][0]["value"] = $array_event_details["audience"];
			$newnode->field_contact["und"][0]["value"] = $array_event_details["HowToContact"];
			$newnode->field_venue["und"][0]["value"] = $array_event_details["venue"];
			$newnode->field_city["und"][0]["value"] = $array_event_details["city"];
			$newnode->field_venuecountry["und"][0]["value"] = $array_event_details["country"];			
			$newnode->field_dates["und"][0]["value"] = $array_event_details["Date_Text"];
			$newnode->field_status["und"][0]["value"] = $array_event_details["status"];
			$newnode->field_language["und"][0]["value"] = $array_event_details["Language"];
			$newnode->field_resources["und"][0]["value"] = $array_event_details["resources"];
			$newnode->field_participants["und"][0]["value"] = $array_event_details["participants"];
			// $newnode->field_type_images = $array_event_details["Desc_Short"];
			$newnode->field_start_date["und"][0]["value"] = $array_event_details["startdate"];
			$newnode->field_start_date["und"][0]["date_type"] = "datestamp";			
	
			if ($newnode = node_submit($newnode)) {
				node_save($newnode);
				// drupal_set_message(t("Node ".$node->title." added correctly"));
			} else {
				// drupal_set_message(t("Node ".$node->title." added incorrectly"), "error");
			}
			break; // End of Creating event
			
			case 'r':
			//
			// Create resource
			//
			break; // End of Creating Event
		} // End of switch depending on the type of resource
	break;

	case "u":
		//
		// Update the resource
		//
		switch ($_GET['rt'])
		{
		case 'e':
			// 
			// Update an event
			//
			// Get the values from the database into an array
			$array_event_details = retrieve_event_details ($ridi, $IMS_RO);
			//
			// assigning values
			//
			$newnode = node_load($ridd);
			$newnode->type = "event_ims";
			$newnode->language = "und";
			$newnode->name = $array_event_details["Name_Full"];
			$newnode->title = $newnode->name;
			$newnode->body["und"][0]["value"] = $array_event_details["Desc_Short"];
			$newnode->body["und"][0]["summary"] = substr($array_event_details["Desc_Short"],0,200)."...";
			$newnode->uid = 64;
			$newnode->status = 1;
			// $newnode->created = time(); // We want to respect this one
			$newnode->changed = time();
			$newnode->comment = 2;
			$newnode->promote = 1;
			$newnode->sticky = 0;
			$newnode->field_original_ims_id["und"][0]["value"] = $ridi;
			$newnode->field_image_url["und"][0]["value"] = $array_event_details["image_url"];
			$newnode->field_audience["und"][0]["value"] = $array_event_details["audience"];
			$newnode->field_contact["und"][0]["value"] = $array_event_details["HowToContact"];
			$newnode->field_venue["und"][0]["value"] = $array_event_details["venue"];
			$newnode->field_city["und"][0]["value"] = $array_event_details["city"];
			$newnode->field_venuecountry["und"][0]["value"] = $array_event_details["country"];
			$newnode->field_dates["und"][0]["value"] = $array_event_details["Date_Text"];
			$newnode->field_status["und"][0]["value"] = $array_event_details["status"];
			$newnode->field_language["und"][0]["value"] = $array_event_details["Language"];
			$newnode->field_resources["und"][0]["value"] = $array_event_details["resources"];
			$newnode->field_participants["und"][0]["value"] = $array_event_details["participants"];
			// $newnode->field_type_images = $array_event_details["Desc_Short"];
			$newnode->field_start_date["und"][0]["value"] = $array_event_details["startdate"];
			$newnode->field_start_date["und"][0]["date_type"] = "datestamp";			
			if ($newnode = node_submit($newnode)) {
				node_save($newnode);
				node_load(FALSE, NULL, TRUE);
				// drupal_set_message(t("Node ".$node->title." added correctly"));
			} else {
				// drupal_set_message(t("Node ".$node->title." added incorrectly"), "error");
			}
			
		break; // end of updating an event
		case 'r':
			// 
			// Update a resource
			//		
		break;		
		} // End of switch depending on the type of resource
	break;

	case "d":
		//
		// Delete the resource//
		switch ($_GET['rt'])
		{
		case 'e':
			// 
			// Delete an event (= mark as hidden)
			//		
			$newnode = node_load($ridd);
			$newnode->status = 0;			
			if ($newnode = node_submit($newnode)) {
				node_save($newnode);
				node_load(FALSE, NULL, TRUE);
				// drupal_set_message(t("Node ".$node->title." added correctly"));
			} else {
				// drupal_set_message(t("Node ".$node->title." added incorrectly"), "error");
			}
		break;
		case 'r':
			// 
			// Delete a resource (= mark as hidden)
			//		
		break;
		} // End of switch depending on the type of resource
	break;
	
	
	default:
		//
		// generic process. It verfies the current list against the IMS
		$MaxEventRecordsToUpdate = 50;
		switch ($_GET['rt'])
		{
			case 'e':

				//
				// CHECK EVENTS	
				//	
				// Extract the list of public events into an array
				// The second element in the second level is a flag that marks records that need to be updated.
				//  at the beginning, we set it to 0 (=not found yet).
				//
				$ListPublicEvents_find = $IMS_RO->newFindCommand('__Event');
				$ListPublicEvents_findCriterions = array('OnTheWeb'=>'Yes',);
				foreach($ListPublicEvents_findCriterions as $key=>$value) {
					$ListPublicEvents_find->AddFindCriterion($key,$value);
				}
				
				fmsSetPage($ListPublicEvents_find,'ListPublicEvents',10000); 
				
				$ListPublicEvents_result = $ListPublicEvents_find->execute(); 
				
				if(FileMaker::isError($ListPublicEvents_result)) fmsTrapError($ListPublicEvents_result,"error.php"); 
				
				fmsSetLastPage($ListPublicEvents_result,'ListPublicEvents',10000); 
				
				$ListPublicEvents_row = current($ListPublicEvents_result->getRecords());

				foreach($ListPublicEvents_result->getRecords() as $ListPublicEvents_row) {
					$array_ListPublicEvents[$ListPublicEvents_row->getField('__kp_ID')] = array($ListPublicEvents_row->getField('zz__Modified_Timestamp__lxm'), "0");
				}
				
				//
				// Get a list of the existing events in Drupal
				//
				$query = new EntityFieldQuery();
				$query->entityCondition('entity_type', 'node')
				  ->entityCondition('bundle', 'event_ims');
				$results = $query->execute();
				$array_ListEventsDrupal = node_load_multiple(array_keys($results['node']));
				
				//
				// We check the dates of last update from us and the IMS. If it's more recent in the IMS, we mark for update
				//
			
				foreach ($array_ListEventsDrupal as $key => $element_ListEventsDrupal){
					$ims_id_to_check = $array_ListEventsDrupal[$key]->field_original_ims_id["und"][0]["value"];
					$time_ims = strtotime( $array_ListPublicEvents[$ims_id_to_check][0] );
					$time_drupal = $array_ListEventsDrupal[$key]->changed;
					If ($time_ims == null) {
						// it does not exist in the ims, delete (=hide)
						$array_ListPublicEvents[$ims_id_to_check][1] = "3";
						$array_ListPublicEvents[$ims_id_to_check][2] = $array_ListEventsDrupal[$key]->nid;
					} else If ($time_ims >$time_drupal) {
						// Element exists in drupal and Drupal is older, mark as need to update		
						$array_ListPublicEvents[$ims_id_to_check][1] = "2";
						$array_ListPublicEvents[$ims_id_to_check][2] = $array_ListEventsDrupal[$key]->nid;
					} else If (($time_ims <= $time_drupal) && ($time_ims > 0)) {
						// Element exists in drupal and is more recent, mark as no need to update
						$array_ListPublicEvents[$ims_id_to_check][1] = "1"; 
					}
			
				}
			
				//
				// We go now through the array from the IMS, and act accordingly to it status
				//
				
				$NumberAdditions = 0;
				$NumberIgnored = 0;
				$NumberUpdates = 0;
				$NumberDeletions = 0;
				foreach ($array_ListPublicEvents as $key => $element_ListPublicEvents)	{
					switch ($array_ListPublicEvents[$key][1]) {
						case "0":
							$array_UrlsToCall[$key] = $base_url."/gbifims_import/?ot=c&rt=e&ridi=".$key;
							$NumberAdditions = $NumberAdditions + 1;
							break;
						case "1":
							// Element exists in drupal and is more recent, no need to update
							// echo "case1 ";
							$NumberIgnored += 1;
							break;
						case "2":
							// Element exists in drupal and Drupal is older, needs to be updated
							// echo "case2 ";
							$array_UrlsToCall[$key] = $base_url."gbifims_import/?ot=u&rt=e&ridi=".$key."&ridd=".$array_ListPublicEvents[$key][2];
							echo $array_UrlsToCall[$key];
							$NumberUpdates += 1;				
							break;			
						case "3":
							// Element is no longer available from FileMaker, so we marke for 'deletion' (=hide)
							// echo "case3 ";
							$array_UrlsToCall[$key] = $base_url."gbifims_import/?ot=d&rt=e&ridd=".$array_ListPublicEvents[$key][2];
							$NumberDeletions += 1;				
							break;			
	
						} // end of the switch depending on the type of operation					
					} // end of foreach checking the IMS array	
					//
					// Now we call all the pages that perform the actual operations
					//
					$mh = curl_multi_init(); 				
					$curl_array = array();
					$dummycounter = 0;
					foreach($array_UrlsToCall as $i => $url)
					{
						If ($dummycounter < $MaxEventRecordsToUpdate)
							{
							$curl_array[$i] = curl_init($url);
							curl_setopt($curl_array[$i], CURLOPT_CONNECTTIMEOUT, 15); //Only send the data, don't wait.
							curl_setopt($curl_array[$i], CURLOPT_TIMEOUT, 15);
							curl_multi_add_handle($mh, $curl_array[$i]);
							$dummycounter += 1;						
							}
					}
//					If ($dummycounter == $MaxEventRecordsToUpdate)
//						{
//						$curl_array["extra"] = "http://localhost/gbif-portal/gbifims_import/?rt=e";
//						curl_setopt($curl_array["extra"], CURLOPT_CONNECTTIMEOUT, 15); //Only send the data, don't wait.
//						curl_setopt($curl_array["extra"], CURLOPT_TIMEOUT, 15);
//						curl_multi_add_handle($mh, $curl_array["extra"]);
//						}
					$running = NULL;
					do {
						usleep(10000);
						curl_multi_exec($mh,$running);
					} while($running > 0);
					$dummycounter = 0;
					foreach($array_UrlsToCall as $i => $url){					
						If ($dummycounter < $MaxEventRecordsToUpdate)
							{
							curl_multi_remove_handle($mh, $curl_array[$i]);
							curl_close($curl_array[$i]);
							$dummycounter += 1;
							} 
					}
//					If ($dummycounter == $MaxEventRecordsToUpdate)
//						{
//						curl_multi_remove_handle($mh, $curl_array["extra"]);
//						// curl_close($curl_array["extra"]);
//						}
				curl_multi_close($mh);       
					
				//
				// Build the output array
				//		
				$page_array['gbifims_import_arguments'] = array(
				  '#title' => t('GBIF IMS data import'),
				  '#markup' => "<h1>".t('EVENT SYNCHRONIZATION RESULTS')."</h1>"."<br /><p>".t('Number of existing elements NOT needing an update: ').$NumberIgnored.".<br />&nbsp;<br />".t('Number of additions: ').$NumberAdditions.".<br />".t('Number of existing elements needing an update: ').$NumberUpdates.".<br />".t('Number of elements deactivated: ').$NumberDeletions.".<br />&nbsp;</p>",);
				If ($dummycounter == $MaxEventRecordsToUpdate) {
					$page_array['gbifims_import_arguments']['#markup'] .= "<p>".t('IMPORTANT NOTE: To avoid server overload, only ').$MaxEventRecordsToUpdate.t(' update operations are performed every time you call this script. Reload this page to continue the synchronization till this message dissapears.')."</p>";
				}
				
				return $page_array;	
			break;
			
			default:
				//
				// if no variable is set, we show some generic info and links
				//
				$page_array['gbifims_import_arguments'] = array(
					  '#title' => t('GBIF IMS data import'),
					  '#markup' => "<p>".t('This module allows to synchronize/import information from the GBIF Information Management System to its website.')."<br />".t('Please use one of the links abelow if you want to launch the process manually:')."<br />&nbsp;</p>"."<ul><li><a href=\"".$base_url."/gbifims_import/?rt=e\">".t('Synchronize events')."</a></li><li><a href=\"".$base_url."/gbifims_import/?rt=r\">".t('Synchronize resources')."</a></li></ul><p>&nbsp;</p>",);
				return $page_array;	
			break;
			
			} // End of switch for GET variable of Record Type
	break;
} // End of switch for GET variable of Operation Type
} // End of Page declaration

//
// Functions to extract information
//

function retrieve_event_details ($event_id, $IMS_RO) {
//
// LINK FIRST DATASET: EVENT DETAILS
//

	$EventDetails_find = $IMS_RO->newFindCommand('W_Events');
	$EventDetails_findCriterions = array('__kp_ID'=>$event_id,);
	foreach($EventDetails_findCriterions as $key=>$value) {
		$EventDetails_find->AddFindCriterion($key,$value);
	}
	
	fmsSetPage($EventDetails_find,'EventDetails',1); 
	
	$EventDetails_result = $EventDetails_find->execute(); 
	
	if(FileMaker::isError($EventDetails_result)) fmsTrapError($EventDetails_result,"error.php"); 
	
	$EventDetails_row = current($EventDetails_result->getRecords());
	
	$EventDetails__WEVEEventCity_portal = fmsRelatedRecord($EventDetails_row, 'WEVE_Event_City');
	$EventDetails__WEVEEventContactEventEventroleParticipantEventrole_portal = fmsRelatedRecord($EventDetails_row, 'WEVE_Event_ContactEventEventroleParticipant_Eventrole');
	$EventDetails__WEVEEventContactEventEventroleParticipantContact_portal = fmsRelatedRecord($EventDetails_row, 'WEVE_Event_ContactEventEventroleParticipant_Contact');
	$EventDetails__WEVEEventContactEventEventroleParticipant_portal = fmsRelatedRecord($EventDetails_row, 'WEVE_Event_ContactEventEventroleParticipant');
	$EventDetails__WEVEEventEventresourcetype_portal = fmsRelatedRecord($EventDetails_row, 'WEVE_Event_Eventresourcetype');
	$EventDetails__WEVEEventEventEventaccesscategory_portal = fmsRelatedRecord($EventDetails_row, 'WEVE_Event_EventEventaccesscategory');
	$EventDetails__WEVEEventEventEventaccesscategoryEventaccesscategory_portal = fmsRelatedRecord($EventDetails_row, 'WEVE_Event_EventEventaccesscategory_Eventaccesscategory');
	$EventDetails__WEVEEventEventtype_portal = fmsRelatedRecord($EventDetails_row, 'WEVE_Event_Eventtype');
	$EventDetails__WEVEEventEventKeyword_portal = fmsRelatedRecord($EventDetails_row, 'WEVE_Event_EventKeyword');
	$EventDetails__WEVEEventEventKeywordKeyword_portal = fmsRelatedRecord($EventDetails_row, 'WEVE_Event_EventKeyword_Keyword');
	$EventDetails__WEVEEventEventstatus_portal = fmsRelatedRecord($EventDetails_row, 'WEVE_Event_Eventstatus');
	$EventDetails__WEVEEventCityCountry_portal = fmsRelatedRecord($EventDetails_row, 'WEVE_Event_City_Country');
	$EventDetails__WEventsEventsAccessCategories_portal = fmsRelatedRecord($EventDetails_row, 'W_Events_EventsAccessCategories');
	
//
//// LIST PEOPLE
//
$ListPeople_find = $IMS_RO->newFindCommand('W_ListPeopleEvent');
$ListPeople_findCriterions = array('_kf_EventID'=>$EventDetails_row->getField('__kp_ID'),);
foreach($ListPeople_findCriterions as $key=>$value) {
	$ListPeople_find->AddFindCriterion($key,$value);
}

fmsSetPage($ListPeople_find,'ListPeople',500); 

if(FileMaker::isError($ListPeople_result)) fmsTrapError($ListPeople_result,"error.php"); 
$ListPeople_find->addSortRule('WEVE_Event_ContactEventEventroleParticipant_Contact::Name_Abv__lct',1,FILEMAKER_SORT_ASCEND); 

$ListPeople_result = $ListPeople_find->execute(); 

if(FileMaker::isError($ListPeople_result)) $NoPeople = True; 

// Condition temporarily disabled. It should prevent the page to break if there is no people associated to an event
if ($NoPeople != True) {

fmsSetLastPage($ListPeople_result,'ListPeople',500); 

$ListPeople_row = current($ListPeople_result->getRecords());

$ListPeople__WListPeopleEventContact_portal = fmsRelatedRecord($ListPeople_row, 'W_ListPeopleEvent_Contact');
$ListPeople__WListPeopleEventEventPeopleRole_portal = fmsRelatedRecord($ListPeople_row, 'W_ListPeopleEvent_EventPeopleRole');
$ListPeople__WListPeopleEventEvents_portal = fmsRelatedRecord($ListPeople_row, 'W_ListPeopleEvent_Events');
$ListPeople__WListPeopleEventParticipant_portal = fmsRelatedRecord($ListPeople_row, 'W_ListPeopleEvent_Participant');

// Condition temporarily disabled. It should prevent the page to break if there is no people associated to an event
}

//
//// LIST OF RESOURCES
//

$ListResources_find = $IMS_RO->newFindCommand('W_ListResourcesEvent');
$ListResources_findCriterions = array('_kf_EventID'=>$EventDetails_row->getField('__kp_ID'),);
foreach($ListResources_findCriterions as $key=>$value) {
	$ListResources_find->AddFindCriterion($key,$value);
}
// This section is hidden, unless a get variable is given a specific value (displays only public items)
if ($_GET['secret'] != '1') 
	{
	$ListResources_find->AddFindCriterion('OnTheWeb','Yes');
	}

fmsSetPage($ListResources_find,'ListResources',50); 

$ListResources_result = $ListResources_find->execute(); 

if(FileMaker::isError($ListResources_result)) $NoResources = True; 

if ($NoResources != True) {

fmsSetLastPage($ListResources_result,'ListResources',50); 

$ListResources_row = current($ListResources_result->getRecords());

$ListResources__WListResourcesEventEvents_portal = fmsRelatedRecord($ListResources_row, 'W_ListResourcesEvent_Events');
$ListResources__WListResourcesEventResourceType_portal = fmsRelatedRecord($ListResources_row, 'W_ListResourcesEvent_ResourceType');

}

//
//// LIST OF COUNTRIES with participants in the event, for the summary
//

$ListCountries_find = $IMS_RO->newFindCommand('W_ListCountriesParticipantsEvent');
$ListCountries_findCriterions = array('_kf_EventID'=>$EventDetails_row->getField('__kp_ID'),'_kf_EventroleID'=>'14',);
foreach($ListCountries_findCriterions as $key=>$value) {
	$ListCountries_find->AddFindCriterion($key,$value);
}

fmsSetPage($ListCountries_find,'ListCountries',1000); 

$ListCountries_find->addSortRule('WEVE_Event_ContactEventEventroleParticipant_Participant::Name_Short',1,FILEMAKER_SORT_ASCEND); 

$ListCountries_result = $ListCountries_find->execute(); 

if(FileMaker::isError($ListCountries_result)) 
{
	$ListCountriesString = "";

} else {
	
	fmsSetLastPage($ListCountries_result,'ListCountries',1000); 
	
	$ListCountries_row = current($ListCountries_result->getRecords());
	
	$ListCountries__WListPeopleEventParticipant_portal = fmsRelatedRecord($ListCountries_row, 'W_ListPeopleEvent_Participant');
	
	$ListCountriesString = "";
	$PreviousCountry = "";
	$NumberNodes = 0;
	$NumberParticipantsCountry = 0;
	
	foreach($ListCountries_result->getRecords() as $ListCountries_row)
	{ 
		If (($ListCountries_row->getField('WEVE_Event_ContactEventEventroleParticipant_Participant::Name_Short') != $PreviousCountry) & ($ListCountries_row->getField('WEVE_Event_ContactEventEventroleParticipant_Participant::Name_Short') != ""))
		{
		$ListCountriesString .= $PreviousCountry;
		$NumberNodes = $NumberNodes + 1;
		$PreviousCountry = $ListCountries_row->getField('WEVE_Event_ContactEventEventroleParticipant_Participant::Name_Short');
		If ($NumberParticipantsCountry != 0)
			{
			If ($NumberParticipantsCountry != 1) 
				{
				// We only show the number of people if it is more than 1
				$ListCountriesString .= " (".$NumberParticipantsCountry." people), "; 
				} else {
				$ListCountriesString .= ", "; 
				}				
			$NumberParticipantsCountry = 0;
			} else {
			// $ListCountriesString .= ", ";
			}
		}
		$NumberParticipantsCountry = $NumberParticipantsCountry + 1;
	}
	If ($PreviousCountry != "")
	{
	$ListCountriesString = substr($ListCountriesString,0,-2);
	If ($ListCountriesString != "")
		{
		$ListCountriesString .= " and ";
		}
	$ListCountriesString .= $PreviousCountry;
	If ($NumberParticipantsCountry != 1) 
		{
		// We only show the number of people if it is more than 1
		$ListCountriesString .= " (".$NumberParticipantsCountry." people)";
		}
	}
}

//
// END OF DATABASE QUERIES
//

//
// Assignement of calculated values
//

// Target audience

if ($EventDetails_row->getField('NumberParticipants') != "") 
	{
		$audience .= $EventDetails_row->getField('NumberParticipants')." people";
		If ($NumberNodes != 0)
			{
			$audience .= " from ".$NumberNodes." countries/organisations: ";
			}
	} 
	// we show the number the origin of participants if there is anything to show
	if ($ListCountriesString != "") 
	{
	$audience .= $ListCountriesString.".<br />";
	} else {
		if ($EventDetails_row->getField('NumberParticipants') != "") 
		{
		$audience .= ". ";
		}
	}
    $audience .= htmlspecialchars_decode($EventDetails_row->getField('TargetPublic'));

// Venue
    
	if ($EventDetails_row->getField('Venue') != "") 
	{
	$venue .= htmlspecialchars_decode($EventDetails_row->getField('Venue')); 
	}

// City
    
	if ($EventDetails_row->getField('WEVE_Event_City::Cityname') != "") 
	{
	$city .= $EventDetails_row->getField('WEVE_Event_City::Cityname');
	}
	
// Country
    
	if ($EventDetails_row->getField('WEVE_Event_City_Country::Name') != "") 
	{
	$country .= $EventDetails_row->getField('WEVE_Event_City_Country::Name');
	}

// Participants

if ($NoPeople != True) { 
	$participants .= "<ul>";
	foreach($ListPeople_result->getRecords() as $ListPeople_row){ 
		$participants .= "<li><div Title=".$ListPeople_row->getField('Notes')."><a href=\"http://www.gbif.org/\">".$ListPeople_row->getField('WEVE_Event_ContactEventEventroleParticipant_Contact::Name_Abv__lct')."</a> (".$ListPeople_row->getField('WEVE_Event_ContactEventEventroleParticipant_Eventrole::Peoplerole').")</div></li>";
	}
	$participants .= "</ul>";
	
}

// Resources

if ($NoResources != True) {
	$resources .= "<ul>";
	foreach($ListResources_result->getRecords() as $ListResources_row){
		  $resources .= "<li><a href=\"".$ListResources_row->getField('URL')."\" target=\"_blank\">".$ListResources_row->getField('Description')."</a>.</li>";
	}
	$resources .= "</ul>";
}

// image URL

$image_url = "http://imsgbif.gbif.org/CMS/W_TR_EventDetail.php?image=Thumbnail&recid=".$EventDetails_row->getRecordId();

$array_event_details = array ("__kp_ID" => $EventDetails_row->getField('__kp_ID'), "Name_Full" => htmlspecialchars_decode($EventDetails_row->getField('Name_Full')), "Desc_Short" => htmlspecialchars_decode($EventDetails_row->getField('Desc_Short')), "audience" => $audience, "HowToContact" => htmlspecialchars_decode($EventDetails_row->getField('HowToContact')), "Date_Text" => htmlspecialchars_decode($EventDetails_row->getField('Date_Text')), "status" => htmlspecialchars_decode($EventDetails_row->getField('WEVE_Event_Eventstatus::Status')), "image_url" => htmlspecialchars_decode($image_url), "Language" => htmlspecialchars_decode($EventDetails_row->getField('Language')), "venue" => $venue, "city" => $city, "country" => $country, "participants" => $participants, "resources" => $resources, "startdate" => strtotime($EventDetails_row->getField('Date_Start')), );

return $array_event_details;


} // end of retrieve_event_details function declaration
